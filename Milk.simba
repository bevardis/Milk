program Milk;
{$DEFINE SMART}{$I SRL/SRL/MISC/Smart.scar}
{$i SRL/SRL.scar}{$i REFLECTION/Reflection.simba}
{$i SRL/SRL/MISC/PaintSmart.scar}{$i REFLECTION/CORE/RefPaint.simba}
{by bevardis + Home}
const
  BUILD = 49;
  SCRIPTNAME = 'MilkDebugger';
  {↓Constants you can edit are below↓}
  WORLD = 10; {← Input 0 to load a random world.}
  MEMBERS = False;
  SIGNED = True;
                                                   {       _                                   }
  DEBUG_ANIMATION = True;                          {      / |________________________________  }
  DEBUG_LOCATION = True;                           {     / Configure us, constants whispered.| }
  DEBUG_INVENTORY = True;                          {     \   ________________________________| }
  DEBUG_COMPASS = True;                            {      \_|                                  }
  {↑Constants you can edit are above↑}
  P_COLOR = 8842476;
  P_SHADOW = 131072;
var
  ScriptTitle : String;
  ItemInteger : Integer;
procedure DefineScriptTitle;
begin
  Case Random(4) of
    0: SCRIPTTITLE := '♠'+SCRIPTNAME+'♠';
    1: SCRIPTTITLE := '♣'+SCRIPTNAME+'♣';
    2: SCRIPTTITLE := '♥'+SCRIPTNAME+'♥';
    3: SCRIPTTITLE := '♦'+SCRIPTNAME+'♦';
  end;
end;
procedure PrintOnSmart(TP: TStringArray; Placement: TPoint; Colour, Shadow: integer);
var
  mx, my, Pic, I, B, H, TPH, Numb: Integer;
  TTP: TPointArray;
  Canvas: TCanvas;
begin
  SmartSetDebug(True);
  GetClientDimensions(mx, my);
  Pic := BitmapFromString(mx, my, '');
  TPH := High(TP);
  for I := 0 to TPH do
  begin
    TTP := LoadTextTPA(TP[i], SmallChars, H);
    for B := 0 to High(TTP) do
    begin
      Numb := ((I + 1) * 13);
      FastSetPixel(Pic, TTP[b].x + 1, TTP[b].y + Numb + 1, Shadow);
      FastSetPixel(Pic, TTP[b].x, TTP[b].y + Numb, Colour);
    end;
  end;
  Canvas := TCANVAS.Create;
  Canvas.Handle := SmartGetDebugDC;
  DrawBitmap(Pic, Canvas, Placement.x, Placement.y);
  FreeBitmap(Pic);
end;
begin
  DefineScriptTitle;
  Disguise(ScriptTitle + ' build '+ FloatToStr(BUILD));

  Smart_Server := WORLD;
  Smart_Members := MEMBERS;
  Smart_Signed := SIGNED;
  Smart_SuperDetail := False;


  ClearDebug;SetupSRL;SetupReflection;ClearDebug;SmartSetDebug(True);EnableSmartCanvas;

  While (true) do
    begin
      //R_DebugNPCs(True);
      if (DEBUG_ANIMATION) then PrintOnSmart(['Animation #'+IntToStr(GetAnimation)],Point(20,20),P_COLOR,P_SHADOW); {[x]}
      if (DEBUG_LOCATION) then PrintOnSmart(['Current tile '+IntToStr(GetMyPos.x) +', ' + IntToStr(GetMyPos.y)],Point(20,45),P_COLOR,P_SHADOW); {[x]}
      if (DEBUG_COMPASS) then PrintOnSmart(['Compass is at ' + FloatToStr(Floor(rs_GetCompassAngleDegrees)) + ' degrees'],Point(580,142),P_COLOR,P_SHADOW); {[x]}
      if (DEBUG_INVENTORY) then {[x]}
      begin
        for ItemInteger := 0 to 28 do
        begin
          if (ExistsItem(ItemInteger)) then
          begin
            PrintOnSmart([IntToStr(GetItemIDAt(ItemInteger))], ItemCoords(ItemInteger),P_COLOR,P_SHADOW);
          end;
        end;
      end;
      Wait(450);
      ClearDebug;
    end;

end.
